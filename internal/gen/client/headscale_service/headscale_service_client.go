// Code generated by go-swagger; DO NOT EDIT.

package headscale_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new headscale service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new headscale service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new headscale service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for headscale service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HeadscaleServiceBackfillNodeIPs(params *HeadscaleServiceBackfillNodeIPsParams, opts ...ClientOption) (*HeadscaleServiceBackfillNodeIPsOK, error)

	HeadscaleServiceCreateAPIKey(params *HeadscaleServiceCreateAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceCreateAPIKeyOK, error)

	HeadscaleServiceCreatePreAuthKey(params *HeadscaleServiceCreatePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceCreatePreAuthKeyOK, error)

	HeadscaleServiceCreateUser(params *HeadscaleServiceCreateUserParams, opts ...ClientOption) (*HeadscaleServiceCreateUserOK, error)

	HeadscaleServiceDebugCreateNode(params *HeadscaleServiceDebugCreateNodeParams, opts ...ClientOption) (*HeadscaleServiceDebugCreateNodeOK, error)

	HeadscaleServiceDeleteAPIKey(params *HeadscaleServiceDeleteAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceDeleteAPIKeyOK, error)

	HeadscaleServiceDeleteNode(params *HeadscaleServiceDeleteNodeParams, opts ...ClientOption) (*HeadscaleServiceDeleteNodeOK, error)

	HeadscaleServiceDeleteRoute(params *HeadscaleServiceDeleteRouteParams, opts ...ClientOption) (*HeadscaleServiceDeleteRouteOK, error)

	HeadscaleServiceDeleteUser(params *HeadscaleServiceDeleteUserParams, opts ...ClientOption) (*HeadscaleServiceDeleteUserOK, error)

	HeadscaleServiceDisableRoute(params *HeadscaleServiceDisableRouteParams, opts ...ClientOption) (*HeadscaleServiceDisableRouteOK, error)

	HeadscaleServiceEnableRoute(params *HeadscaleServiceEnableRouteParams, opts ...ClientOption) (*HeadscaleServiceEnableRouteOK, error)

	HeadscaleServiceExpireAPIKey(params *HeadscaleServiceExpireAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceExpireAPIKeyOK, error)

	HeadscaleServiceExpireNode(params *HeadscaleServiceExpireNodeParams, opts ...ClientOption) (*HeadscaleServiceExpireNodeOK, error)

	HeadscaleServiceExpirePreAuthKey(params *HeadscaleServiceExpirePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceExpirePreAuthKeyOK, error)

	HeadscaleServiceGetNode(params *HeadscaleServiceGetNodeParams, opts ...ClientOption) (*HeadscaleServiceGetNodeOK, error)

	HeadscaleServiceGetNodeRoutes(params *HeadscaleServiceGetNodeRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetNodeRoutesOK, error)

	HeadscaleServiceGetPolicy(params *HeadscaleServiceGetPolicyParams, opts ...ClientOption) (*HeadscaleServiceGetPolicyOK, error)

	HeadscaleServiceGetRoutes(params *HeadscaleServiceGetRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetRoutesOK, error)

	HeadscaleServiceListAPIKeys(params *HeadscaleServiceListAPIKeysParams, opts ...ClientOption) (*HeadscaleServiceListAPIKeysOK, error)

	HeadscaleServiceListNodes(params *HeadscaleServiceListNodesParams, opts ...ClientOption) (*HeadscaleServiceListNodesOK, error)

	HeadscaleServiceListPreAuthKeys(params *HeadscaleServiceListPreAuthKeysParams, opts ...ClientOption) (*HeadscaleServiceListPreAuthKeysOK, error)

	HeadscaleServiceListUsers(params *HeadscaleServiceListUsersParams, opts ...ClientOption) (*HeadscaleServiceListUsersOK, error)

	HeadscaleServiceMoveNode(params *HeadscaleServiceMoveNodeParams, opts ...ClientOption) (*HeadscaleServiceMoveNodeOK, error)

	HeadscaleServiceRegisterNode(params *HeadscaleServiceRegisterNodeParams, opts ...ClientOption) (*HeadscaleServiceRegisterNodeOK, error)

	HeadscaleServiceRenameNode(params *HeadscaleServiceRenameNodeParams, opts ...ClientOption) (*HeadscaleServiceRenameNodeOK, error)

	HeadscaleServiceRenameUser(params *HeadscaleServiceRenameUserParams, opts ...ClientOption) (*HeadscaleServiceRenameUserOK, error)

	HeadscaleServiceSetPolicy(params *HeadscaleServiceSetPolicyParams, opts ...ClientOption) (*HeadscaleServiceSetPolicyOK, error)

	HeadscaleServiceSetTags(params *HeadscaleServiceSetTagsParams, opts ...ClientOption) (*HeadscaleServiceSetTagsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
HeadscaleServiceBackfillNodeIPs headscale service backfill node i ps API
*/
func (a *Client) HeadscaleServiceBackfillNodeIPs(params *HeadscaleServiceBackfillNodeIPsParams, opts ...ClientOption) (*HeadscaleServiceBackfillNodeIPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceBackfillNodeIPsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_BackfillNodeIPs",
		Method:             "POST",
		PathPattern:        "/api/v1/node/backfillips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceBackfillNodeIPsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceBackfillNodeIPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceBackfillNodeIPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceCreateAPIKey Apis keys start
*/
func (a *Client) HeadscaleServiceCreateAPIKey(params *HeadscaleServiceCreateAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceCreateAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceCreateAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_CreateApiKey",
		Method:             "POST",
		PathPattern:        "/api/v1/apikey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceCreateAPIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceCreateAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceCreateAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceCreatePreAuthKey pres auth keys start
*/
func (a *Client) HeadscaleServiceCreatePreAuthKey(params *HeadscaleServiceCreatePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceCreatePreAuthKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceCreatePreAuthKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_CreatePreAuthKey",
		Method:             "POST",
		PathPattern:        "/api/v1/preauthkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceCreatePreAuthKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceCreatePreAuthKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceCreatePreAuthKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceCreateUser users start
*/
func (a *Client) HeadscaleServiceCreateUser(params *HeadscaleServiceCreateUserParams, opts ...ClientOption) (*HeadscaleServiceCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_CreateUser",
		Method:             "POST",
		PathPattern:        "/api/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceCreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDebugCreateNode nodes start
*/
func (a *Client) HeadscaleServiceDebugCreateNode(params *HeadscaleServiceDebugCreateNodeParams, opts ...ClientOption) (*HeadscaleServiceDebugCreateNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDebugCreateNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DebugCreateNode",
		Method:             "POST",
		PathPattern:        "/api/v1/debug/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDebugCreateNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDebugCreateNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDebugCreateNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteAPIKey headscale service delete Api key API
*/
func (a *Client) HeadscaleServiceDeleteAPIKey(params *HeadscaleServiceDeleteAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceDeleteAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteApiKey",
		Method:             "DELETE",
		PathPattern:        "/api/v1/apikey/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteAPIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteNode headscale service delete node API
*/
func (a *Client) HeadscaleServiceDeleteNode(params *HeadscaleServiceDeleteNodeParams, opts ...ClientOption) (*HeadscaleServiceDeleteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteNode",
		Method:             "DELETE",
		PathPattern:        "/api/v1/node/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteRoute headscale service delete route API
*/
func (a *Client) HeadscaleServiceDeleteRoute(params *HeadscaleServiceDeleteRouteParams, opts ...ClientOption) (*HeadscaleServiceDeleteRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteRoute",
		Method:             "DELETE",
		PathPattern:        "/api/v1/routes/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteUser headscale service delete user API
*/
func (a *Client) HeadscaleServiceDeleteUser(params *HeadscaleServiceDeleteUserParams, opts ...ClientOption) (*HeadscaleServiceDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/v1/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDisableRoute headscale service disable route API
*/
func (a *Client) HeadscaleServiceDisableRoute(params *HeadscaleServiceDisableRouteParams, opts ...ClientOption) (*HeadscaleServiceDisableRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDisableRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DisableRoute",
		Method:             "POST",
		PathPattern:        "/api/v1/routes/{routeId}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDisableRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDisableRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDisableRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceEnableRoute headscale service enable route API
*/
func (a *Client) HeadscaleServiceEnableRoute(params *HeadscaleServiceEnableRouteParams, opts ...ClientOption) (*HeadscaleServiceEnableRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceEnableRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_EnableRoute",
		Method:             "POST",
		PathPattern:        "/api/v1/routes/{routeId}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceEnableRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceEnableRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceEnableRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceExpireAPIKey headscale service expire Api key API
*/
func (a *Client) HeadscaleServiceExpireAPIKey(params *HeadscaleServiceExpireAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceExpireAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceExpireAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ExpireApiKey",
		Method:             "POST",
		PathPattern:        "/api/v1/apikey/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceExpireAPIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceExpireAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceExpireAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceExpireNode headscale service expire node API
*/
func (a *Client) HeadscaleServiceExpireNode(params *HeadscaleServiceExpireNodeParams, opts ...ClientOption) (*HeadscaleServiceExpireNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceExpireNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ExpireNode",
		Method:             "POST",
		PathPattern:        "/api/v1/node/{nodeId}/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceExpireNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceExpireNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceExpireNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceExpirePreAuthKey headscale service expire pre auth key API
*/
func (a *Client) HeadscaleServiceExpirePreAuthKey(params *HeadscaleServiceExpirePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceExpirePreAuthKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceExpirePreAuthKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ExpirePreAuthKey",
		Method:             "POST",
		PathPattern:        "/api/v1/preauthkey/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceExpirePreAuthKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceExpirePreAuthKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceExpirePreAuthKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetNode headscale service get node API
*/
func (a *Client) HeadscaleServiceGetNode(params *HeadscaleServiceGetNodeParams, opts ...ClientOption) (*HeadscaleServiceGetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetNode",
		Method:             "GET",
		PathPattern:        "/api/v1/node/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetNodeRoutes headscale service get node routes API
*/
func (a *Client) HeadscaleServiceGetNodeRoutes(params *HeadscaleServiceGetNodeRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetNodeRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetNodeRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetNodeRoutes",
		Method:             "GET",
		PathPattern:        "/api/v1/node/{nodeId}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetNodeRoutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetNodeRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetNodeRoutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetPolicy policies start
*/
func (a *Client) HeadscaleServiceGetPolicy(params *HeadscaleServiceGetPolicyParams, opts ...ClientOption) (*HeadscaleServiceGetPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetPolicy",
		Method:             "GET",
		PathPattern:        "/api/v1/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetRoutes routes start
*/
func (a *Client) HeadscaleServiceGetRoutes(params *HeadscaleServiceGetRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetRoutes",
		Method:             "GET",
		PathPattern:        "/api/v1/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetRoutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetRoutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListAPIKeys headscale service list Api keys API
*/
func (a *Client) HeadscaleServiceListAPIKeys(params *HeadscaleServiceListAPIKeysParams, opts ...ClientOption) (*HeadscaleServiceListAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListAPIKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListApiKeys",
		Method:             "GET",
		PathPattern:        "/api/v1/apikey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListAPIKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListNodes headscale service list nodes API
*/
func (a *Client) HeadscaleServiceListNodes(params *HeadscaleServiceListNodesParams, opts ...ClientOption) (*HeadscaleServiceListNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListNodes",
		Method:             "GET",
		PathPattern:        "/api/v1/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListPreAuthKeys headscale service list pre auth keys API
*/
func (a *Client) HeadscaleServiceListPreAuthKeys(params *HeadscaleServiceListPreAuthKeysParams, opts ...ClientOption) (*HeadscaleServiceListPreAuthKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListPreAuthKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListPreAuthKeys",
		Method:             "GET",
		PathPattern:        "/api/v1/preauthkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListPreAuthKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListPreAuthKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListPreAuthKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListUsers headscale service list users API
*/
func (a *Client) HeadscaleServiceListUsers(params *HeadscaleServiceListUsersParams, opts ...ClientOption) (*HeadscaleServiceListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListUsers",
		Method:             "GET",
		PathPattern:        "/api/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceMoveNode headscale service move node API
*/
func (a *Client) HeadscaleServiceMoveNode(params *HeadscaleServiceMoveNodeParams, opts ...ClientOption) (*HeadscaleServiceMoveNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceMoveNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_MoveNode",
		Method:             "POST",
		PathPattern:        "/api/v1/node/{nodeId}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceMoveNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceMoveNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceMoveNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceRegisterNode headscale service register node API
*/
func (a *Client) HeadscaleServiceRegisterNode(params *HeadscaleServiceRegisterNodeParams, opts ...ClientOption) (*HeadscaleServiceRegisterNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceRegisterNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_RegisterNode",
		Method:             "POST",
		PathPattern:        "/api/v1/node/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceRegisterNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceRegisterNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceRegisterNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceRenameNode headscale service rename node API
*/
func (a *Client) HeadscaleServiceRenameNode(params *HeadscaleServiceRenameNodeParams, opts ...ClientOption) (*HeadscaleServiceRenameNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceRenameNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_RenameNode",
		Method:             "POST",
		PathPattern:        "/api/v1/node/{nodeId}/rename/{newName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceRenameNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceRenameNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceRenameNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceRenameUser headscale service rename user API
*/
func (a *Client) HeadscaleServiceRenameUser(params *HeadscaleServiceRenameUserParams, opts ...ClientOption) (*HeadscaleServiceRenameUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceRenameUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_RenameUser",
		Method:             "POST",
		PathPattern:        "/api/v1/user/{oldId}/rename/{newName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceRenameUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceRenameUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceRenameUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceSetPolicy headscale service set policy API
*/
func (a *Client) HeadscaleServiceSetPolicy(params *HeadscaleServiceSetPolicyParams, opts ...ClientOption) (*HeadscaleServiceSetPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceSetPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_SetPolicy",
		Method:             "PUT",
		PathPattern:        "/api/v1/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceSetPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceSetPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceSetPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceSetTags headscale service set tags API
*/
func (a *Client) HeadscaleServiceSetTags(params *HeadscaleServiceSetTagsParams, opts ...ClientOption) (*HeadscaleServiceSetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceSetTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_SetTags",
		Method:             "POST",
		PathPattern:        "/api/v1/node/{nodeId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceSetTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceSetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceSetTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
